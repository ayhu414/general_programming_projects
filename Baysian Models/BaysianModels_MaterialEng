{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "30df98c4-1071-4508-929e-853a2b3fbddb",
   "metadata": {},
   "source": [
    "### Assignment: Learning the Thermodynamics of Liquid Hafnium\n",
    "\n",
    "#### Allen (Yixin) Hu"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d94ea13-864a-4be9-92c6-fbb5eebcb619",
   "metadata": {},
   "source": [
    "loading in the required packages..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a5d1f52-3e3e-43b5-8d00-0f747177f88f",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy import stats\n",
    "from corner import corner\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import kombine"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc772800-9f33-46f4-b655-6d45f3ed769e",
   "metadata": {},
   "source": [
    "Loading the data..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "481f96a8-654f-4a34-a4dd-646405b271d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "h_data = pd.read_csv('data/Cag2008.csv', delim_whitespace=True)\n",
    "cp_data = pd.read_csv('data/Kor2005.csv', delim_whitespace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "94ae2346-bd2b-4429-9ec8-9060887ac1db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>T</th>\n",
       "      <th>Cp</th>\n",
       "      <th>sigma_Cp</th>\n",
       "      <th>phase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2572.576997</td>\n",
       "      <td>43.436111</td>\n",
       "      <td>0.664185</td>\n",
       "      <td>liquid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2771.501011</td>\n",
       "      <td>43.826980</td>\n",
       "      <td>0.581517</td>\n",
       "      <td>liquid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2970.600775</td>\n",
       "      <td>44.591934</td>\n",
       "      <td>0.290242</td>\n",
       "      <td>liquid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3170.188737</td>\n",
       "      <td>46.396015</td>\n",
       "      <td>0.498180</td>\n",
       "      <td>liquid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3369.210390</td>\n",
       "      <td>46.994709</td>\n",
       "      <td>0.581219</td>\n",
       "      <td>liquid</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             T         Cp  sigma_Cp   phase\n",
       "0  2572.576997  43.436111  0.664185  liquid\n",
       "1  2771.501011  43.826980  0.581517  liquid\n",
       "2  2970.600775  44.591934  0.290242  liquid\n",
       "3  3170.188737  46.396015  0.498180  liquid\n",
       "4  3369.210390  46.994709  0.581219  liquid"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cp_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab5b5362-20a8-4452-babc-6ca1f149836a",
   "metadata": {},
   "source": [
    "# Problem 1: Building Prior Distributions\n",
    "\n",
    "We will try to fit a model that expresses the heat capacity as a linear model:\n",
    "\n",
    "$C_p(T) = c_1 + c_2 T$ (1.1)\n",
    "\n",
    "Thermodyanmics dictates that enthalpy is defined by:\n",
    "\n",
    "$H(T) = \\int_0^T C_p(T) dT = c_0 + c_1 T + c_2 T^2/2$ (1.2)\n",
    "\n",
    "Note that the thermodynamic model has three parameters $c_0$, $c_1$ and $c_2$.\n",
    "\n",
    "First step is to define a prior distribution via a simple robust regression to find an estimate for c_1 and c_2 using the expression (1.1) above and the cp_data dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9591b18b-1de6-47e2-baa2-75fab4fdacc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = cp_data['T']\n",
    "y = cp_data['Cp']\n",
    "\n",
    "robust_reg1 = stats.siegelslopes(y,x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7d7fd030-fac3-450d-8fd1-28e26f615e21",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(x, y, 'b.')\n",
    "ax.set_xlim(2500, 5000)\n",
    "ax.plot(x, robust_reg1[1] + robust_reg1[0] * x, 'r-')\n",
    "plt.xlabel(\"$T$\")\n",
    "plt.ylabel(\"$C_p$\")\n",
    "plt.title(\"Plot of Specific Heat Capacity $C_p (J mol^{-1}K{-1})$ against temperature $T (K)$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccc55595-f0d1-49d5-841f-f8e5439f2267",
   "metadata": {},
   "source": [
    "Next, we have to compute $c_0$ by rearranging (1.2) and using this method on the h_data dataset:\n",
    "\n",
    "$H(T) = c_0 + c_1 T + c_2 T^2/2$\n",
    "$\\rightarrow H(T) - c_1 T - c_2 T^2/2 = c_0 $"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "351b92d8-63ae-456c-ad4f-0839bca00499",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_1 = robust_reg1[1]\n",
    "c_2 = robust_reg1[0]\n",
    "resid = h_data['H'] - c_1 * h_data['T'] - c_2 * h_data['T'] ** 2 / 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "df09e0b2-521c-410d-852e-f42625c17216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     3314.960105\n",
       "1     3464.797728\n",
       "2     4095.936126\n",
       "3     4495.037316\n",
       "4     4775.066037\n",
       "5     5181.028646\n",
       "6     5165.530078\n",
       "7     5280.618276\n",
       "8     5268.620096\n",
       "9     5402.973945\n",
       "10    5370.901506\n",
       "11    5393.157559\n",
       "12    5401.698029\n",
       "13    5388.712190\n",
       "14    5328.215683\n",
       "15    5327.561181\n",
       "16    5238.713535\n",
       "17    5093.844177\n",
       "18    5018.494062\n",
       "dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "resid"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a74432a3-ba3e-4581-86fc-ae73ad071b15",
   "metadata": {},
   "source": [
    "Computing the median of residual to estimate $c_0$..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2dd863c3-5073-4091-882b-375a39ac60b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5238.713535338946\n"
     ]
    }
   ],
   "source": [
    "c_0 = np.median(resid)\n",
    "print(c_0) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa2d4861-d3e0-4ada-a56c-c2f9a83c368d",
   "metadata": {},
   "source": [
    "Making a plot of enthalpy $H$ against temperature $T$. Show both the data points and the fitted curve."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a0fa8cb8-f7b8-4a46-919a-2ccf0a2d3997",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_2 = h_data['T']\n",
    "y_2 = h_data['H']\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(x_2, y_2, 'b.')\n",
    "ax.plot(x_2, c_0 +  c_1 * h_data['T'] + c_2 * h_data['T'] ** 2 / 2, 'r-')\n",
    "plt.xlabel(\"$T$\")\n",
    "plt.ylabel(\"$C_p$\")\n",
    "plt.title(\"Plot of Enthalpy $H$ (J $mol^{-1})$ against temperature $T (K)$\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d7359de-c8fd-487c-b0e3-585051a9838c",
   "metadata": {},
   "source": [
    "Constructing prior distributions using scipy's Normal distribution by:\n",
    "1) setting the location to be the values of the parameters determined by the curve fitting\n",
    "2) the scale to be 50% of the parameter value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "54902521-ed2a-4abd-bf8d-70f2ef299281",
   "metadata": {},
   "outputs": [],
   "source": [
    "c_params = [c_0,c_1,c_2]\n",
    "priors = []\n",
    "\n",
    "for param in c_params:\n",
    "    priors.append(stats.norm(param, 0.5 * abs(param))) \n",
    "    #abs is to make sure that negative values dont get negative variance\n",
    "    \n",
    "#rmse = np.sqrt(np.power(c_0 +  c_1 * h_data['T'] + c_2 * h_data['T'] ** 2 / 2, 2).sum())\n",
    "#priors.append(stats.expon(scale=rmse))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a5be1f35-237e-43c4-a691-09173b788aee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x180 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(1, 3, figsize=(8, 2.5))\n",
    "\n",
    "# Make the distributiosn for each parameter\n",
    "for ax, prior, m, l in zip(axs, priors, c_params,['$c_0$', '$c_1$', '$c_2$']):\n",
    "    r = np.linspace(m - 0.4 * abs(m), m + 0.4 * abs(m), 128)\n",
    "    ax.plot(r, prior.pdf(r))\n",
    "    \n",
    "    ax.set_title(f'Prior for {l}')\n",
    "    ax.set_xlabel(l)\n",
    "    \n",
    "#r = np.linspace(1e-6, 0.04, 128)\n",
    "#ax = axs[-1]\n",
    "#ax.plot(r, priors[-1].pdf(r))\n",
    "#ax.set_title(f'Prior for $\\\\epsilon$')\n",
    "#ax.set_xlabel('$\\\\epsilon$')\n",
    "    \n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef84a8ec-e082-4fb4-b885-c068145f6ca2",
   "metadata": {},
   "source": [
    "Calculate the log prior probability of $c_0$ = 5000, $c_1$ = 35, and $c_2$ = 0.005"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "25a022e6-9860-458d-a6be-c327c0c960af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-9.064669035861819\n"
     ]
    }
   ],
   "source": [
    "logpdf = 0\n",
    "for prior, th in zip(priors,[5000,35,0.0005]):\n",
    "    logpdf += prior.logpdf(th)\n",
    "\n",
    "print(logpdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a3f615c-ca5b-4a46-a98a-0b19e165836a",
   "metadata": {},
   "source": [
    "#### Defining Prior Distribution for Dataset Hyperparams\n",
    "\n",
    "Using a uniform prior distribution to define a dataset hyperparameter for the $C_p$ dataset ($\\alpha_{C_p}$) and $H$ dataset ($\\alpha_H$)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "1eb13ae6-dfa5-4757-87a5-1c7a56ae6d74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "Cp_hyper_prior = stats.uniform(0,10)\n",
    "H_hyper_prior = stats.uniform(0,10)\n",
    "\n",
    "dataset_priors = [Cp_hyper_prior,H_hyper_prior]\n",
    "priors.extend(dataset_priors)\n",
    "print(len(priors))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "060a8c9e-83cc-4d5d-b21d-9500ff5ccebc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1\n"
     ]
    }
   ],
   "source": [
    "pdf = 0\n",
    "for prior, th in zip(dataset_priors,[5,11]):\n",
    "    pdf += prior.pdf(th)\n",
    "\n",
    "print(pdf)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9125321b-aff8-4067-abf8-a3820fb1159f",
   "metadata": {},
   "source": [
    "### Problem 2: Defining the Likelihood Function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00bfa62b-259c-4b6f-b0f0-ec0ee9921bad",
   "metadata": {},
   "source": [
    "Now defining a function to compute the posterior probability, given the prior distribution ($P(\\theta|M)$) and the likelihood of the observed data ($P(D|\\theta,M)$).\n",
    "\n",
    "That is to say: we want to calculate $P(\\theta|D,M) = P(D|\\theta,M)P(\\theta|M)$\n",
    "\n",
    "Therefore, we need the second component ($P(D|\\theta,M)$), the likelihood of the data, calculated from the following expression:\n",
    "\n",
    "$P(D_i|\\theta,M) = \\mathcal{N}(D_i|M(T_i|\\theta), \\sigma_i/\\alpha_D)$\n",
    "\n",
    "where $\\mathcal{N}(x|y,\\sigma)$ is the probability distribution function for the normal distribution with mean $y$ and standard deviation $\\sigma$. In our context, $\\alpha_D$ is the dataset hyperparameter for any one of the datasets, and sigmas are provided from each of the datasets\n",
    "\n",
    "We assume that the probability of each data point is independent, so you can compute the probability of the whole dataset as:\n",
    "\n",
    "$P(D|\\theta,M) = \\prod_i P(D_i|\\theta,M) = \\sum_i \\log P(D_i|\\theta,M)$\n",
    "\n",
    "Using the code provided by our assignment write-up:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "12001c5e-89c5-4957-a3b7-5f62f39eec6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Posterior:\n",
    "    \"\"\"Posterior probability of liquid H thermodynamic models\n",
    "    \n",
    "    Assumes parameters are in the order: c_0, c_1, c_2, alpha_cp, alpha_h\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, cp_data, h_data, priors):\n",
    "        \"\"\"Initialize the class\n",
    "        \n",
    "        Args:\n",
    "            cp_data: Heat capacity data\n",
    "            h_data: Enthalpy data\n",
    "            prior: Prior distributions for each parameter\n",
    "        \"\"\"\n",
    "        self.cp_data = cp_data\n",
    "        self.h_data = h_data\n",
    "        self.priors = priors\n",
    "        \n",
    "    def logprob_cp_data(self, params):\n",
    "        \"\"\"Compute the log probability of observing the C_p data\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of observing the data\n",
    "        \"\"\"\n",
    "        \n",
    "        # Constructing the normal distributions P(D_i|Theta,M) = N(D_i,S_i/a_D) for each data point\n",
    "        \n",
    "        cp_data['preds'] = params[1] + params[2] * cp_data['T']\n",
    "        \n",
    "        logpdf = stats.norm(cp_data['preds'], cp_data['sigma_Cp']/params[3]).logpdf(cp_data['Cp']).sum()\n",
    "    \n",
    "        return logpdf\n",
    "    \n",
    "    def logprob_h_data(self, params):\n",
    "        \"\"\"Compute the log probability of observing the H data\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of observing the data\n",
    "        \"\"\"\n",
    "        \n",
    "        h_data['preds'] = params[0] + params[1] * h_data['T'] + params[2] * h_data['T'] ** 2 / 2\n",
    "\n",
    "        logpdf = stats.norm(h_data['preds'], h_data['sigma_H']/params[4]).logpdf(h_data['H']).sum()\n",
    "\n",
    "        return logpdf\n",
    "        \n",
    "    def logprob_prior(self, params):\n",
    "        \"\"\"Compute the log probability of the parameters given the prior distributions.\n",
    "        \n",
    "        Includes the prior for model parameters and the \"dataset weights\" (\\alpha)\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of the priors\n",
    "        \"\"\"\n",
    "        \n",
    "        logpdf_prior = 0\n",
    "        \n",
    "        for prior, th in zip(priors,params):\n",
    "            logpdf_prior += prior.logpdf(th)\n",
    "\n",
    "        return logpdf_prior\n",
    "    \n",
    "    def __call__(self, params):\n",
    "        \"\"\"Compute the log posterior probability given the paramers\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of the posterior\n",
    "        \"\"\"\n",
    "        \n",
    "        return self.logprob_cp_data(params) + self.logprob_prior(params) + self.logprob_h_data(params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c785e3c7-57ea-4e6b-bfdf-a7417abd28d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1224.5799885607444"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ln_posterior = Posterior(cp_data, h_data, priors)\n",
    "test_params = [5000, 35, 0.005, 1, 1]\n",
    "lnpdf = ln_posterior(test_params)\n",
    "\n",
    "lnpdf"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d52ae9d7-d709-4a54-bca8-9784840f1899",
   "metadata": {},
   "source": [
    "### Problem 3 Sampling the Posterior"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9c66e95-32ed-4d3d-871c-2c94ecef8b32",
   "metadata": {},
   "source": [
    "Sampling 128 points from the prior distribution for each model parameter and storing them in a 128 x 5 array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5ed1e7ce-6896-46b0-9032-38e5284578d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(128, 5)\n"
     ]
    }
   ],
   "source": [
    "n_walkers = 128\n",
    "param_init = np.vstack([\n",
    "    p.rvs(size=(n_walkers,)) for p in priors\n",
    "]).T\n",
    "\n",
    "print(param_init.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b4cf9f3-a596-44c1-9351-f6021d0b6b67",
   "metadata": {},
   "source": [
    "Creating a sampler using Kombine with 128 walkers using the posterior function made previously"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "89c3a77f-67ad-4920-a13e-d595b4450889",
   "metadata": {},
   "outputs": [],
   "source": [
    "n_params = len(priors)\n",
    "\n",
    "sampler = kombine.Sampler(n_walkers, n_params, ln_posterior, pool=kombine.serialpool.SerialPool())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c3e5204-c182-4a5f-9249-bbade380c776",
   "metadata": {},
   "source": [
    "Burning in the sampler using the initial points sampled from the prior as a starting point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "edd36326-3918-494a-88b8-504724ca2865",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 19s, sys: 687 ms, total: 1min 19s\n",
      "Wall time: 1min 18s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "output = sampler.burnin(param_init)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a3a8048-c542-4bd1-a959-170b789dc1a0",
   "metadata": {},
   "source": [
    "Completing the following tasks:\n",
    "\n",
    "1. Make a burn-in curve of acceptance probability against steps.\n",
    "2. How many steps did it take for the sampler to converge? (Please do NOT simply read from the plot. Try to get more accurate statistics out of the sampler objects. Same for next question.)\n",
    "3. What was the acceptance probability of the last 5 steps? (If it is not ~0.5, re-run the burn in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5a797139-d206-436f-ac07-b5dd22dd4066",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Burn-in Curve Progression')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(sampler.acceptance_fraction)\n",
    "\n",
    "ax.set_xlabel('Step')\n",
    "ax.set_ylabel('P(Accept)')\n",
    "ax.set_title('Burn-in Curve Progression')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "008c1a0f-fa61-40cc-acee-cdb1ce4ef3a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Burn-in required 248 steps\n"
     ]
    }
   ],
   "source": [
    "burn_in_length = len(sampler.acceptance_fraction)\n",
    "print(f'Burn-in required {burn_in_length} steps')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "23d2b841-b610-478a-8419-2846d5fdc1e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.5234375 0.5546875 0.5234375 0.5703125 0.578125 ]\n"
     ]
    }
   ],
   "source": [
    "print(sampler.acceptance_fraction[-5:])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b01273-f1b1-41d5-bd5a-c4a472d9acb3",
   "metadata": {},
   "source": [
    "which is decently close to 0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "870864eb-f882-4dfa-b4f5-c21a619ec7e2",
   "metadata": {},
   "source": [
    "Now running the converged sampler for 64 steps and then drawing all of the samples from the posterior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f8ae3272-839f-4cc2-8a95-8cf2cbd79072",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 20.1 s, sys: 79.3 ms, total: 20.2 s\n",
      "Wall time: 20.1 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Get more samples by running with the now-converged sampler\n",
    "outputs = sampler.run_mcmc(64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4acddc1f-cfd2-42cf-be2d-9e4ab7f7b8de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retrieved 4312 samples from the posterior\n"
     ]
    }
   ],
   "source": [
    "samples = sampler.get_samples()  # Gets only the samples after burn-in\n",
    "print(f'Retrieved {len(samples)} samples from the posterior')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e640595c-9d0c-40c0-b95d-cb05f879407d",
   "metadata": {},
   "source": [
    "Now that all the samples have been retrieved, answering the following questions:\n",
    "\n",
    "1. What is the mean and the 95% confidence intervals of $c_2$ and $\\alpha_H$? Compute the confidence intervals using the 2.5 and 97.5 percentiles with numpy's percentile function.\n",
    "\n",
    "2. Plot the mean and 95% confidence intervals (Hint: fill_between) of the heat capacity ($C_p(T)$) as a function of temperature between 2500 and 5000K.\n",
    "\n",
    "3. Does the model consistently over- or underestimate the heat capacity at intermediate temperatures (3500-4000K)? Which data points do you think are leading to that systematic error?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4481fde3-a7c0-4d67-b8ee-8dfc0a6aa0fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#priors = c0, c1, c2, aCp, aH\n",
    "# index for c2 and aH is 2 and 4\n",
    "\n",
    "c2_post = samples[:,2]\n",
    "aH_post = samples[:,4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "36a1ec24-ed40-4c81-8947-5befbb54c512",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean for c_2 is 0.0053230171546375035, and the confidence interval is (0.004780549910854795, 0.00582621198716387)\n",
      "The mean for a_H is 2.6660828494315716, and the confidence interval is (1.8160827611980515, 3.6353987484603514)\n"
     ]
    }
   ],
   "source": [
    "c2_confid_interv = (np.percentile(c2_post, 2.5),np.percentile(c2_post, 97.5))\n",
    "c2_mean = np.mean(c2_post)\n",
    "\n",
    "aH_confid_interv = (np.percentile(aH_post, 2.5),np.percentile(aH_post, 97.5))\n",
    "aH_mean = np.mean(aH_post)\n",
    "\n",
    "print(f'The mean for c_2 is {c2_mean}, and the confidence interval is {c2_confid_interv}')\n",
    "print(f'The mean for a_H is {aH_mean}, and the confidence interval is {aH_confid_interv}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f0485227-0fb1-4494-aada-29ddd4d9c35e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def c_p(c_1,c_2,T):\n",
    "    '''\n",
    "    Computes the heat capacity given parameters\n",
    "    '''\n",
    "    return c_1 + c_2 * T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "05b30fac-96cb-4fd6-92f2-6bcaa43eb6ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "T = np.linspace(2500, 5000, 128)\n",
    "Cp_predictions = [c_p(s[1],s[2],T) for s in samples]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "81f030b9-1a4d-44a7-b314-90885eab066e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predicted $C_p$ from sampled parameters (original data shown in red)')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Plot between the 2.5th and 97.5th percentiles\n",
    "ax.fill_between(\n",
    "    T, np.percentile(Cp_predictions, 2.5, axis=0), np.percentile(Cp_predictions, 97.5, axis=0),\n",
    "    alpha=0.3\n",
    ")\n",
    "\n",
    "# Plot the mean\n",
    "ax.plot(T, np.mean(Cp_predictions, axis=0))\n",
    "ax.set_xlim(2500, 5000)\n",
    "\n",
    "ax.plot(x, y, 'r.')\n",
    "\n",
    "ax.set_xlabel('T')\n",
    "ax.set_ylabel('$C_p$')\n",
    "ax.set_title('Predicted $C_p$ from sampled parameters (original data shown in red)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d93ff016-da55-49a1-ab88-2c15d9a0996b",
   "metadata": {},
   "source": [
    "Notice that at the intermediate values, it seems as though the we are systematically underpredicting (unlike at the beginning where variation is quite random, which is to be expected). I beleive that this might be caused by the point near the higher values of T, whereby one or two points are 'pulling up' the model due to the high values observed at these temperature ranges."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7614cebc-1e0e-43cf-993c-55d7a46c8f7b",
   "metadata": {},
   "source": [
    "### Problem 4: Outlier Sensitivity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e2aea1a-e66b-40a9-abdf-c15693c38f4a",
   "metadata": {},
   "source": [
    "Modifying the likelihood function to take the form of student-t distributions (df=2.1) rather than normal distributions, and re-running problems 2 and 3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e6e19f3c-7828-4f62-afc3-354b0638278f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Posterior_modif:\n",
    "    \"\"\"Posterior probability of liquid H thermodynamic models\n",
    "    \n",
    "    Assumes parameters are in the order: c_0, c_1, c_2, alpha_cp, alpha_h\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self, cp_data, h_data, priors):\n",
    "        \"\"\"Initialize the class\n",
    "        \n",
    "        Args:\n",
    "            cp_data: Heat capacity data\n",
    "            h_data: Enthalpy data\n",
    "            prior: Prior distributions for each parameter\n",
    "        \"\"\"\n",
    "        self.cp_data = cp_data\n",
    "        self.h_data = h_data\n",
    "        self.priors = priors\n",
    "        \n",
    "    def logprob_cp_data(self, params):\n",
    "        \"\"\"Compute the log probability of observing the C_p data\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of observing the data\n",
    "        \"\"\"\n",
    "        \n",
    "        # Constructing the normal distributions t distributions for each\n",
    "                \n",
    "        cp_data['preds'] = params[1] + params[2] * cp_data['T']\n",
    "\n",
    "        logpdf = stats.t.logpdf(cp_data['Cp'],2.1,cp_data['preds'],params[3]).sum()\n",
    "    \n",
    "        return logpdf\n",
    "    \n",
    "    def logprob_h_data(self, params):\n",
    "        \"\"\"Compute the log probability of observing the H data\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of observing the data\n",
    "        \"\"\"\n",
    "        \n",
    "        h_data['preds'] = params[0] + params[1] * h_data['T'] + params[2] * h_data['T'] ** 2 / 2\n",
    "        \n",
    "        logpdf = stats.t.logpdf(h_data['H'],2.1, h_data['preds'],params[4]).sum()\n",
    "\n",
    "        return logpdf\n",
    "        \n",
    "    def logprob_prior(self, params):\n",
    "        \"\"\"Compute the log probability of the parameters given the prior distributions.\n",
    "        \n",
    "        Includes the prior for model parameters and the \"dataset weights\" (\\alpha)\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of the priors\n",
    "        \"\"\"\n",
    "        \n",
    "        logpdf_prior = 0\n",
    "        \n",
    "        for prior, th in zip(priors,params):\n",
    "            logpdf_prior += prior.logpdf(th)\n",
    "\n",
    "        return logpdf_prior\n",
    "    \n",
    "    def __call__(self, params):\n",
    "        \"\"\"Compute the log posterior probability given the paramers\n",
    "        \n",
    "        Args:\n",
    "            params ([float]): Chosen parameters\n",
    "        Returns:\n",
    "            Log-likelihood of the posterior\n",
    "        \"\"\"\n",
    "        \n",
    "        return self.logprob_cp_data(params) + self.logprob_prior(params) + self.logprob_h_data(params)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "348d5a82-989f-4ec5-b7d6-8a59522f6b3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-54.741155923890915\n",
      "-565.9993195067407\n",
      "-12.040465823988008\n",
      "-632.7809412546196\n"
     ]
    }
   ],
   "source": [
    "ln_posterior_p4 = Posterior_modif(cp_data, h_data, priors)\n",
    "test_params = [5000, 35, 0.005, 1, 1]\n",
    "print(ln_posterior_p4.logprob_cp_data(test_params))\n",
    "print(ln_posterior_p4.logprob_h_data(test_params))\n",
    "print(ln_posterior_p4.logprob_prior(test_params))\n",
    "print(ln_posterior_p4(test_params))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e19346b-98ef-40c0-b923-c0f39c2bf8ad",
   "metadata": {},
   "source": [
    "Re-constructing part 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "3e6eb481-aef8-42c1-89f0-781055ad3b53",
   "metadata": {},
   "outputs": [],
   "source": [
    "sampler_p4 = kombine.Sampler(n_walkers, n_params, ln_posterior_p4, pool=kombine.serialpool.SerialPool())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "14cc0fc2-63f8-432a-a120-bd99d1e956c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1min 27s, sys: 335 ms, total: 1min 27s\n",
      "Wall time: 1min 27s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "output_p4 = sampler_p4.burnin(param_init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8d2015ff-c7e2-4c26-9285-0c51a5a2b8d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Burn-in Curve Progression')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.plot(sampler_p4.acceptance_fraction)\n",
    "\n",
    "ax.set_xlabel('Step')\n",
    "ax.set_ylabel('P(Accept)')\n",
    "ax.set_title('Burn-in Curve Progression')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "25b1c85d-6fa1-4a94-a722-9f09b422a22e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Burn-in required 445 steps\n"
     ]
    }
   ],
   "source": [
    "burn_in_length = len(sampler_p4.acceptance_fraction)\n",
    "print(f'Burn-in required {burn_in_length} steps')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cef4229b-f768-450f-b0c8-f5c4f7ae28ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.25      0.296875  0.3046875 0.2578125 0.2578125]\n"
     ]
    }
   ],
   "source": [
    "print(sampler_p4.acceptance_fraction[-5:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4fea8d19-f60f-499d-b26e-9e6ff5b8d4c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Retrieved 2802 samples from the posterior\n"
     ]
    }
   ],
   "source": [
    "outputs_p4 = sampler_p4.run_mcmc(64)\n",
    "\n",
    "samples_p4 = sampler_p4.get_samples()  # Gets only the samples after burn-in\n",
    "print(f'Retrieved {len(samples_p4)} samples from the posterior')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4beefdad-c998-4b70-ab57-361ddfb34621",
   "metadata": {},
   "source": [
    "Re-measuring the mean and confidence intervals of $c_2$ and re-plot the mean and confidence intervals of $C_p$ as a function of temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "6c1b982c-3dd0-466a-89ed-183442b65afd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean for c_2 is 0.0047653183323146855, and the confidence interval is (0.004223428117108218, 0.00521234931515113)\n"
     ]
    }
   ],
   "source": [
    "c2_post_p4 = samples_p4[:,2]\n",
    "\n",
    "c2_confid_interv_p4 = (np.percentile(c2_post_p4, 2.5),np.percentile(c2_post_p4, 97.5))\n",
    "c2_mean_p4 = np.mean(c2_post_p4)\n",
    "\n",
    "print(f'The mean for c_2 is {c2_mean_p4}, and the confidence interval is {c2_confid_interv_p4}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "f66a70fc-bcfb-4577-84ff-d093e45b840a",
   "metadata": {},
   "outputs": [],
   "source": [
    "T = np.linspace(2500, 5000, 128)\n",
    "Cp_predictions_p4 = [c_p(s[1],s[2],T) for s in samples_p4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "10361d91-b69c-42e8-9ac3-6f1338e4cfd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Predicted $C_p$ from sampled parameters (original data shown in red)')"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "\n",
    "# Plot the mean\n",
    "ax.plot(T, np.mean(Cp_predictions_p4, axis=0),label='t-dist estimates')\n",
    "ax.set_xlim(2500, 5000)\n",
    "\n",
    "# Plot between the 2.5th and 97.5th percentiles\n",
    "ax.fill_between(\n",
    "    T, np.percentile(Cp_predictions_p4, 2.5, axis=0), np.percentile(Cp_predictions_p4, 97.5, axis=0),\n",
    "    alpha=0.3, label=\"95% confidence interval of t-dist\"\n",
    ")\n",
    "\n",
    "# Plot the mean\n",
    "ax.plot(T, np.mean(Cp_predictions, axis=0),label='normal-dist estimates')\n",
    "ax.set_xlim(2500, 5000)\n",
    "\n",
    "# Plot between the 2.5th and 97.5th percentiles\n",
    "ax.fill_between(\n",
    "    T, np.percentile(Cp_predictions, 2.5, axis=0), np.percentile(Cp_predictions, 97.5, axis=0),\n",
    "    alpha=0.3, label=\"95% confidence interval of normal-dist\"\n",
    ")\n",
    "\n",
    "\n",
    "ax.plot(x, y, 'r.')\n",
    "\n",
    "ax.set_xlabel('T')\n",
    "ax.set_ylabel('$C_p$')\n",
    "ax.legend()\n",
    "ax.set_title('Predicted $C_p$ from sampled parameters (original data shown in red)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ce7f4e37-3138-4f37-8301-f744ea3811b0",
   "metadata": {},
   "source": [
    "#### Answering: \n",
    "1. Is $c_2$ larger or smaller?\n",
    "2. Does the model have the same systematic errors or are they smaller? Describe why the change has occured?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6f6d593-3ea5-4429-a8b0-4a2cb0969a03",
   "metadata": {},
   "source": [
    "Notice that $c_2$ is smaller in this example (0.0047 point estimate in the current version and 0.0053 point estimate in the previous version).\n",
    "\n",
    "However, it does nevertheless looks like we might be under-predicting slightly with the t-distribution model. The changes in the errors could be due to the fact that we are no longer imposing a strict normality condition, where as the t-distribution does not make the assumption that the population sample standard deviation is known, which gives the data more leeway in making predictions. \n",
    "\n",
    "P.S. Unfortunately the burn-in is quite time/computationally intensive (and windows system only allows for single-thread operations), and thus I was only able to run burn-ins a few times without having my computer on idle for long periods of time."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bayes",
   "language": "python",
   "name": "bayes"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
